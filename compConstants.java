/* Generated By:JavaCC: Do not edit this line. compConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface compConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Letra = 1;
  /** RegularExpression Id. */
  int Numero = 2;
  /** RegularExpression Id. */
  int Pregunta = 3;
  /** RegularExpression Id. */
  int Entonces = 4;
  /** RegularExpression Id. */
  int ParenIzq = 5;
  /** RegularExpression Id. */
  int ParenDer = 6;
  /** RegularExpression Id. */
  int Comilla = 7;
  /** RegularExpression Id. */
  int Apost = 8;
  /** RegularExpression Id. */
  int Comillas = 9;
  /** RegularExpression Id. */
  int Char = 10;
  /** RegularExpression Id. */
  int Int = 11;
  /** RegularExpression Id. */
  int Float = 12;
  /** RegularExpression Id. */
  int Double = 13;
  /** RegularExpression Id. */
  int String = 14;
  /** RegularExpression Id. */
  int Bool = 15;
  /** RegularExpression Id. */
  int Var = 16;
  /** RegularExpression Id. */
  int Byte = 17;
  /** RegularExpression Id. */
  int Long = 18;
  /** RegularExpression Id. */
  int Short = 19;
  /** RegularExpression Id. */
  int Ulong = 20;
  /** RegularExpression Id. */
  int UINT = 21;
  /** RegularExpression Id. */
  int Sbyte = 22;
  /** RegularExpression Id. */
  int Ushort = 23;
  /** RegularExpression Id. */
  int Nchar = 24;
  /** RegularExpression Id. */
  int Varchar = 25;
  /** RegularExpression Id. */
  int DATE = 26;
  /** RegularExpression Id. */
  int DATETIME = 27;
  /** RegularExpression Id. */
  int Numeric = 28;
  /** RegularExpression Id. */
  int NVARCHAR = 29;
  /** RegularExpression Id. */
  int Bit = 30;
  /** RegularExpression Id. */
  int TipoDato = 31;
  /** RegularExpression Id. */
  int LlaveIzq = 32;
  /** RegularExpression Id. */
  int LlaveDer = 33;
  /** RegularExpression Id. */
  int PuntoYComa = 34;
  /** RegularExpression Id. */
  int IgualIgual = 35;
  /** RegularExpression Id. */
  int MenorQue = 36;
  /** RegularExpression Id. */
  int MayorQue = 37;
  /** RegularExpression Id. */
  int DiferenteDe = 38;
  /** RegularExpression Id. */
  int MenorIgual = 39;
  /** RegularExpression Id. */
  int MayorIgual = 40;
  /** RegularExpression Id. */
  int Comparador = 41;
  /** RegularExpression Id. */
  int AccesoMiembro = 42;
  /** RegularExpression Id. */
  int Sustitucion = 43;
  /** RegularExpression Id. */
  int Public = 44;
  /** RegularExpression Id. */
  int Static = 45;
  /** RegularExpression Id. */
  int Private = 46;
  /** RegularExpression Id. */
  int TipoAcceso = 47;
  /** RegularExpression Id. */
  int Do = 48;
  /** RegularExpression Id. */
  int For = 49;
  /** RegularExpression Id. */
  int Foreach = 50;
  /** RegularExpression Id. */
  int While = 51;
  /** RegularExpression Id. */
  int Ciclo = 52;
  /** RegularExpression Id. */
  int SelectivaMultiple = 53;
  /** RegularExpression Id. */
  int Else = 54;
  /** RegularExpression Id. */
  int Finally = 55;
  /** RegularExpression Id. */
  int Default = 56;
  /** RegularExpression Id. */
  int Defecto = 57;
  /** RegularExpression Id. */
  int Asignar = 58;
  /** RegularExpression Id. */
  int Case = 59;
  /** RegularExpression Id. */
  int Metodo = 60;
  /** RegularExpression Id. */
  int ClaseConsole = 61;
  /** RegularExpression Id. */
  int Sobrecargar = 62;
  /** RegularExpression Id. */
  int Concat = 63;
  /** RegularExpression Id. */
  int Length = 64;
  /** RegularExpression Id. */
  int Write = 65;
  /** RegularExpression Id. */
  int WriteLine = 66;
  /** RegularExpression Id. */
  int Delete = 67;
  /** RegularExpression Id. */
  int Include = 68;
  /** RegularExpression Id. */
  int Substring = 69;
  /** RegularExpression Id. */
  int ToChar = 70;
  /** RegularExpression Id. */
  int ToUpper = 71;
  /** RegularExpression Id. */
  int ToLower = 72;
  /** RegularExpression Id. */
  int ToString = 73;
  /** RegularExpression Id. */
  int Next = 74;
  /** RegularExpression Id. */
  int AVG = 75;
  /** RegularExpression Id. */
  int Count = 76;
  /** RegularExpression Id. */
  int Max = 77;
  /** RegularExpression Id. */
  int Min = 78;
  /** RegularExpression Id. */
  int Sum = 79;
  /** RegularExpression Id. */
  int Funcion = 80;
  /** RegularExpression Id. */
  int Estructura = 81;
  /** RegularExpression Id. */
  int CapExcepcion = 82;
  /** RegularExpression Id. */
  int Namespace = 83;
  /** RegularExpression Id. */
  int Intenta = 84;
  /** RegularExpression Id. */
  int Romper = 85;
  /** RegularExpression Id. */
  int Base = 86;
  /** RegularExpression Id. */
  int Checked = 87;
  /** RegularExpression Id. */
  int BackColor = 88;
  /** RegularExpression Id. */
  int Font = 89;
  /** RegularExpression Id. */
  int Text = 90;
  /** RegularExpression Id. */
  int Enabled = 91;
  /** RegularExpression Id. */
  int TextAling = 92;
  /** RegularExpression Id. */
  int Propiedad = 93;
  /** RegularExpression Id. */
  int True = 94;
  /** RegularExpression Id. */
  int False = 95;
  /** RegularExpression Id. */
  int ResultadoLogico = 96;
  /** RegularExpression Id. */
  int List = 97;
  /** RegularExpression Id. */
  int Stack = 98;
  /** RegularExpression Id. */
  int Queue = 99;
  /** RegularExpression Id. */
  int Lista = 100;
  /** RegularExpression Id. */
  int Retorno = 101;
  /** RegularExpression Id. */
  int Libreria = 102;
  /** RegularExpression Id. */
  int OperadorNew = 103;
  /** RegularExpression Id. */
  int Mas = 104;
  /** RegularExpression Id. */
  int Menos = 105;
  /** RegularExpression Id. */
  int OpAritmetico = 106;
  /** RegularExpression Id. */
  int Incremento = 107;
  /** RegularExpression Id. */
  int Decremento = 108;
  /** RegularExpression Id. */
  int OpAritmeticoUnitario = 109;
  /** RegularExpression Id. */
  int Multiplicacion = 110;
  /** RegularExpression Id. */
  int Divison = 111;
  /** RegularExpression Id. */
  int Modulo = 112;
  /** RegularExpression Id. */
  int OpAritmeticoBinario = 113;
  /** RegularExpression Id. */
  int OpLogicoBoolUnitario = 114;
  /** RegularExpression Id. */
  int OrLogico = 115;
  /** RegularExpression Id. */
  int AndLogico = 116;
  /** RegularExpression Id. */
  int ExclusivoOrLogico = 117;
  /** RegularExpression Id. */
  int AND = 118;
  /** RegularExpression Id. */
  int OR = 119;
  /** RegularExpression Id. */
  int OpLogicoBoolBinario = 120;
  /** RegularExpression Id. */
  int AndCondicional = 121;
  /** RegularExpression Id. */
  int OrCondicional = 122;
  /** RegularExpression Id. */
  int OpLogicoBoolBinarioCondicional = 123;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<Letra>",
    "<Numero>",
    "<Pregunta>",
    "<Entonces>",
    "<ParenIzq>",
    "<ParenDer>",
    "<Comilla>",
    "<Apost>",
    "<Comillas>",
    "<Char>",
    "<Int>",
    "<Float>",
    "<Double>",
    "<String>",
    "<Bool>",
    "<Var>",
    "<Byte>",
    "<Long>",
    "<Short>",
    "<Ulong>",
    "<UINT>",
    "<Sbyte>",
    "<Ushort>",
    "<Nchar>",
    "<Varchar>",
    "<DATE>",
    "<DATETIME>",
    "<Numeric>",
    "<NVARCHAR>",
    "<Bit>",
    "<TipoDato>",
    "<LlaveIzq>",
    "<LlaveDer>",
    "<PuntoYComa>",
    "<IgualIgual>",
    "<MenorQue>",
    "<MayorQue>",
    "<DiferenteDe>",
    "<MenorIgual>",
    "<MayorIgual>",
    "<Comparador>",
    "<AccesoMiembro>",
    "<Sustitucion>",
    "<Public>",
    "<Static>",
    "<Private>",
    "<TipoAcceso>",
    "<Do>",
    "<For>",
    "<Foreach>",
    "<While>",
    "<Ciclo>",
    "<SelectivaMultiple>",
    "<Else>",
    "<Finally>",
    "<Default>",
    "<Defecto>",
    "<Asignar>",
    "<Case>",
    "<Metodo>",
    "<ClaseConsole>",
    "<Sobrecargar>",
    "<Concat>",
    "<Length>",
    "<Write>",
    "<WriteLine>",
    "<Delete>",
    "<Include>",
    "<Substring>",
    "<ToChar>",
    "<ToUpper>",
    "<ToLower>",
    "<ToString>",
    "<Next>",
    "<AVG>",
    "<Count>",
    "<Max>",
    "<Min>",
    "<Sum>",
    "<Funcion>",
    "<Estructura>",
    "<CapExcepcion>",
    "<Namespace>",
    "<Intenta>",
    "<Romper>",
    "<Base>",
    "<Checked>",
    "<BackColor>",
    "<Font>",
    "<Text>",
    "<Enabled>",
    "<TextAling>",
    "<Propiedad>",
    "<True>",
    "<False>",
    "<ResultadoLogico>",
    "<List>",
    "<Stack>",
    "<Queue>",
    "<Lista>",
    "<Retorno>",
    "<Libreria>",
    "<OperadorNew>",
    "<Mas>",
    "<Menos>",
    "<OpAritmetico>",
    "<Incremento>",
    "<Decremento>",
    "<OpAritmeticoUnitario>",
    "<Multiplicacion>",
    "<Divison>",
    "<Modulo>",
    "<OpAritmeticoBinario>",
    "<OpLogicoBoolUnitario>",
    "<OrLogico>",
    "<AndLogico>",
    "<ExclusivoOrLogico>",
    "<AND>",
    "<OR>",
    "<OpLogicoBoolBinario>",
    "<AndCondicional>",
    "<OrCondicional>",
    "<OpLogicoBoolBinarioCondicional>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\t\"",
  };

}
