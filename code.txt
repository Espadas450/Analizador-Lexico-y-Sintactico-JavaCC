using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Programa1Ciclos
{
    class Program
    {
        static void Main(string[] args)
        {
            //Programa 1 - Ciclos
            //Espadas Rodriguez Sajid Arturo

            //Declaracion de variables
            int Num,cont=1,contador=1;

            //Capturar datos
            Console.Write("Numero de la tabla que desea ");

            //Captura de datos
            Num = Int16.Parse(Console.ReadLine());

            //Ciclo FOR
            Console.WriteLine("Tabla de multiplicar (Con ciclo FOR)");
            for(int c = 1; c <= 10; c++)
            {
                Console.WriteLine(Num + "*" +c+ "=" + (c * Num));
            }

            

            //Ciclo DO-WHILE
            Console.WriteLine("Tabla de multiplicar (Con ciclo DO - WHILE)");
            do
            {
                Console.WriteLine(Num + "*" + cont + "=" + (cont * Num));
                cont++;

            }

            while (cont<=10);

            //Ciclo WHILE
            Console.WriteLine("Tabla de multiplicar (Con Ciclo WHILE)");
            while (contador<=10)
            {
                Console.WriteLine(Num + "*" + contador + "=" + (contador * Num));
                contador++;
            }


            Console.ReadKey();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Programa1Ciclos
{
    class Program
    {
        static void Main(string[] args)
        {
            //Programa 1 - Ciclos
            //Espadas Rodriguez Sajid Arturo

            //Declaracion de variables
            int Num,cont=1,contador=1;

            //Capturar datos
            Console.Write("Numero de la tabla que desea ");

            //Captura de datos
            Num = Int16.Parse(Console.ReadLine());

            //Ciclo FOR
            Console.WriteLine("Tabla de multiplicar (Con ciclo FOR)");
            for(int c = 1; c <= 10; c++)
            {
                Console.WriteLine(Num + "*" +c+ "=" + (c * Num));
            }

            

            //Ciclo DO-WHILE
            Console.WriteLine("Tabla de multiplicar (Con ciclo DO - WHILE)");
            do
            {
                Console.WriteLine(Num + "*" + cont + "=" + (cont * Num));
                cont++;

            }

            while (cont<=10);

            //Ciclo WHILE
            Console.WriteLine("Tabla de multiplicar (Con Ciclo WHILE)");
            while (contador<=10)
            {
                Console.WriteLine(Num + "*" + contador + "=" + (contador * Num));
                contador++;
            }


            Console.ReadKey();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Programa1Ciclos
{
    class Program
    {
        static void Main(string[] args)
        {
            //Programa 1 - Ciclos
            //Espadas Rodriguez Sajid Arturo

            //Declaracion de variables
            int Num,cont=1,contador=1;

            //Capturar datos
            Console.Write("Numero de la tabla que desea ");

            //Captura de datos
            Num = Int16.Parse(Console.ReadLine());

            //Ciclo FOR
            Console.WriteLine("Tabla de multiplicar (Con ciclo FOR)");
            for(int c = 1; c <= 10; c++)
            {
                Console.WriteLine(Num + "*" +c+ "=" + (c * Num));
            }

            

            //Ciclo DO-WHILE
            Console.WriteLine("Tabla de multiplicar (Con ciclo DO - WHILE)");
            do
            {
                Console.WriteLine(Num + "*" + cont + "=" + (cont * Num));
                cont++;

            }

            while (cont<=10);

            //Ciclo WHILE
            Console.WriteLine("Tabla de multiplicar (Con Ciclo WHILE)");
            while (contador<=10)
            {
                Console.WriteLine(Num + "*" + contador + "=" + (contador * Num));
                contador++;
            }


            Console.ReadKey();
        }
    }
}

PARSERBEGIN(PetalParser)
package cb.parser;

import cb.petal.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Stack;

/**
 * Parser for Rational Rose Petal files.
 *
 * @version $Id: PetalParser.jj,v 1.11 2001/06/18 15:20:05 dahm Exp $
 * @author  <A HREF="mailto:markus.dahm@berlin.de">M. Dahm</A>
 */
public class PetalParser {
  private static PetalNode currentparent = null;
  private static Stack parentstack = new Stack(); // Stack<PetalNode>

  private static PetalParser instance;
  private static ObjectFactory factory = ObjectFactory.getInstance();

  public static PetalFile parse(String filename)
    throws IOException, ParseException
  {
    return parse(new FileInputStream(filename));
  }

  public static PetalFile parse(java.net.URL url)
    throws IOException, ParseException
  {
    return parse(url.openStream());
  }

  public static PetalFile parse(File file)
    throws IOException, ParseException
  {
    return parse(new FileInputStream(file));
  }

  public static PetalFile parse(InputStream stream) throws ParseException {
    if(instance == null)
      instance = new PetalParser(stream);
    else
      instance.ReInit(stream);

    return instance.parse();
  }

  private static void saveParent(PetalNode newparent) {
    parentstack.push(currentparent);
    currentparent = newparent;
  }

  private static void restoreParent() {
    currentparent = (PetalNode)parentstack.pop();
  }

}
PARSEREND(PetalParser)

<DEFAULT> SKIP : /* WHITE SPACE */
{
  " " | "t" | "f"
}

/* r and n are not just skipped because they may be significant
 * in recognizing multi-line strings (starting with |)
 */
SPECIALTOKEN : { <NEWLINE: "n"> | <CR: "r"> }

/** Top level construct are always petal and design objects
 */
PetalFile parse() :
{
  PetalObject petal, design;
  PetalFile file = new PetalFile();
  currentparent = file;
}
{
  petal  = parseObject()
  design = parseObject()
  {
    file.setPetal((Petal)petal);
    file.setDesign((Design)design);
    return file;
  }
}

/* Example: (object ClassView "Class" "Use Case View::Student" @76	
 *             location   	(160, 176))
 */
PetalObject parseObject() :
{
  PetalObject obj;
  ArrayList   docs = new ArrayList();
  Token       t1, t2=null, t3=null, t4=null;
  PetalNode prop;
}
{
  /* Object header
   */
  "(object" t1 = <IDENTIFIER> 
    (t2 = <STRING> { docs.add(t2.image); })*
    [t3 = <TAG>] {
      obj = factory.createObject(currentparent, t1.image, docs,
				 t3 == null null : t3.image);
      saveParent(obj);
    }

  /* List of properties
   */
  (t4   = <IDENTIFIER>
   prop = parseValue()
   { obj.addProperty(t4.image, prop); })*
  
  ")"
  {
    restoreParent();
    obj.init();
    return obj;
  }
}

PetalNode parseValue() :
{
  PetalNode p;
}
{
   ( (p = parseObject())
   | (p = parseList()) 
   | LOOKAHEAD(2) (p = parseLiteral())
   | (p = parseTuple())
   | (p = parseValueObject()))
   {
     return p; 
   }
}

/* Example: (list unitreferencelist (object ModuleDiagram "Main"
 *		quid       	"35CB163B03CF"))
 *
 */
List parseList() :
{
  List      list;
  Token     t=null;
  PetalNode obj;
}
{
  "(list" [t = <IDENTIFIER>] {
    list = factory.createList(t == null  null : t.image);
  }

  (obj = parseValue() { list.add(obj); })*
  ")"
  {
    return list;
  }
}

Value parseValueObject() :
{
  StringLiteral str;
  Token         t1;
  Value         value;
}
{
  "(value" t1 = <IDENTIFIER> str = parseString() ")"
  {
    value = factory.createValue(t1.image, str);
    return value;
  }
}

Tuple parseTuple() :
{
  Token t1, t2;
}
{
  "(" t1 = <STRING> t2 = <INTEGER> ")"
  {
    return factory.createTuple(t1.image, t2.image);
  }
}

PetalNode parseLiteral() :
{
  Token t, t1, t2;
  StringLiteral str;
}
{
  str = parseString()  { return str; }
|
  t = <INTEGER> { return factory.createInteger(t.image); }
|
  t = <FLOAT>   { return factory.createFloat(t.image); }
|
  t = <BOOLEAN> { return factory.createBoolean(t.image); }
|
  t = <TAG>   { return factory.createTag(t.image); }
|
  "(" t1 = <INTEGER> "," t2 = <INTEGER> ")"
  {
    return factory.createLocation(t1.image, t2.image);
  }
}

StringLiteral parseString() :
{
  Token t;
}
{
  t = <STRING> { return factory.createString(t.image, false); }
| 
  t = <MULTISTRING> { return factory.createString(t.image, true); }
}

TOKEN : /* LITERALS */
{
  < INTEGER:    <PLUSMINUS> (<DIGIT>)+ >
|
  < FLOAT:      <PLUSMINUS> (<DIGIT>)+ "." (<DIGIT>)* >
|
  < BOOLEAN:    ("FALSE" | "TRUE") >
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < TAG:      "@" (<DIGIT>)+ >
|
  < STRING: (""") (<INSTRING>)* (""") >
|
  /* Parse special case, like in:
   * (value Text 
   * |// $package
   * |#include "$file"
   * |
   * )
   */
  < MULTISTRING: ("|" (<ANY>)* (<CR><NEWLINE>|<NEWLINE>))+ >
|
  < #INSTRING: (([""","","n","r"])
        | (""
            ( ["n","t","b","r","f","","'","""]
            | ["0"-"7"] ( ["0"-"7"] )
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      ) >
|
  < #LETTER:    [ "a"-"z", "A"-"Z", "", "$" ] >
|
  < #ANY:    ["n","r"] >
|
  < #DIGIT:     [ "0"-"9"] >
|
  < #PLUSMINUS: (["+", "-"]) >
}


-- Creamos la base de datos
CREATE DATABASE TBD_Rpedidos_T8

-- Usamos la base de datos
USE TBD_Rpedidos_T8

-- Creamos la tabla [Customer]
CREATE TABLE Customer(
CustId INT NOT NULL, --Llave primaria
CreditLimit FLOAT
)

-- Creamos la tabla [CustName]
CREATE TABLE CustName(
custId INT NOT NULL, -- Llave foranea
FirstName VARCHAR(50) NOT NULL,
LastName VARCHAR(50) NOT NULL
)

-- Creamos la tabla [CustAdd]
CREATE TABLE CustAdd(
custId INT NOT NULL, -- Llave foranea
Street VARCHAR(30),
City VARCHAR(50),
CustState VARCHAR(30),
Zip VARCHAR(30),
)

-- Creamos la tabla [CustPhone]
CREATE TABLE CustPhone(
custId INT NOT NULL, -- Llave foranea
AreaCode INT,
Number INT NOT NULL
)

-- Creamos la tabla [Orders]
CREATE TABLE Orders(
OrderNo INT NOT NULL, --Llave primaria
orderDate DATE NOT NULL,
TotalAmount FLOAT NOT NULL,
Tax FLOAT NOT NULL
)

-- Creamos la tabla [DeliverToAddress]
CREATE TABLE DeliverToAddress(
OrderNo INT NOT NULL, --Llave Foranea
Street VARCHAR(50) NOT NULL,
City VARCHAR(50) NOT NULL,
DTAState VARCHAR(50) NOT NULL,
Zip VARCHAR(30) NOT NULL
)

-- Creamos la tabla [DeliverToPhone]
CREATE TABLE DeliverToPhone(
OrderNo INT NOT NULL, --Llave Foranea
AreaCode INT NOT NULL,
Number INT NOT NULL
)

-- Creamos la tabla [Item]
CREATE TABLE Item(
ItemNo INT NOT NULL, --Llave primaria
ItemName VARCHAR(30) NOT NULL,
UnitPrice INT NOT NULL,
atyOnHand VARCHAR(30) NOT NULL,
ReorderPoint VARCHAR(30) NOT NULL
)

-- Creamos la tabla [Supplier]
CREATE TABLE Supplier(
SupplierNo INT NOT NULL, --Llave primaria
SupName VARCHAR(50) NOT NULL,
ContactName VARCHAR(50) NOT NULL
)

-- Creamos la tabla [SupAdd]
CREATE TABLE SupAdd(
SupplierNo INT NOT NULL, --Llave primaria
Street VARCHAR(50) NOT NULL,
City VARCHAR(50) NOT NULL,
SupAddState VARCHAR(50) NOT NULL,
ZipPostalCode INT NOT NULL,
Country VARCHAR(50) NOT NULL
)

-- Creamos la tabla [SupPhone]
CREATE TABLE SupPhone(
SupplierNo INT NOT NULL, --Llave primaria
CountryCode INT NOT NULL,
AreaCode INT NOT NULL,
Number INT NOT NULL
)

-- Creamos la tabla [Buys]
CREATE TABLE Buys(
CustId INT NOT NULL,
OrderNo INT NOT NULL
)

-- Creamos la tabla [OrderContains]
CREATE TABLE OrderContains(
OrderNo INT NOT NULL,
ItemNo INT NOT NULL
)
-- Creamos la tabla [Supplies]
CREATE TABLE Supplies(
UnitCost FLOAT NOT NULL,
ItemNo INT NOT NULL,
SupplierNo INT NOT NULL
)

-- Agregamos las restricciones para las llaves primarias y foraneas
ALTER TABLE Customer ADD CONSTRAINT PK_CustIdCust PRIMARY KEY (CustId)
ALTER TABLE CustName ADD CONSTRAINT FK_CustNameId FOREIGN KEY (CustId) REFERENCES Customer(CustId)
ALTER TABLE CustAdd ADD CONSTRAINT Fk_CustAddId FOREIGN KEY (CustId) REFERENCES Customer(CustId)
ALTER TABLE CustPhone ADD CONSTRAINT Fk_CustPhoneId FOREIGN KEY (CustId) REFERENCES Customer(CustId)

ALTER TABLE Orders ADD CONSTRAINT Pk_OrderNo PRIMARY KEY (OrderNo)

ALTER TABLE DeliverToAddress ADD CONSTRAINT Fk_Orders FOREIGN KEY (OrderNo) REFERENCES Orders(OrderNo)
ALTER TABLE DeliverToPhone ADD CONSTRAINT Fk_Orders_2 FOREIGN KEY (OrderNo) REFERENCES Orders(OrderNo)

ALTER TABLE Item ADD CONSTRAINT Pk_ItemNo PRIMARY KEY (ItemNo)
ALTER TABLE Supplier ADD CONSTRAINT Pk_SupplierNo PRIMARY KEY (SupplierNo)

ALTER TABLE SupAdd ADD CONSTRAINT Fk_SupAddId FOREIGN KEY (SupplierNo) REFERENCES Supplier(SupplierNo)
ALTER TABLE SupPhone ADD CONSTRAINT Fk_SupPhoneId FOREIGN KEY (SupplierNo) REFERENCES Supplier(SupplierNo)

-- [Restricciones 1]

ALTER TABLE Buys ADD CONSTRAINT Fk_CustIdBuys FOREIGN KEY (CustId) REFERENCES Customer(CustId)
ALTER TABLE Buys ADD CONSTRAINT Fk_OrderNoBuys FOREIGN KEY (OrderNo) REFERENCES Orders(OrderNo)

ALTER TABLE Buys ADD CONSTRAINT Pk_BuysId PRIMARY KEY (CustId, OrderNo)

ALTER TABLE OrderContains ADD CONSTRAINT Fk_OrderContainsOrderNo FOREIGN KEY (OrderNo) REFERENCES Orders(OrderNo)
ALTER TABLE OrderContains ADD CONSTRAINT Fk_OrderContainsItemNo FOREIGN KEY (ItemNo) REFERENCES Item(ItemNo)
ALTER TABLE OrderContains ADD CONSTRAINT Pk_OrderContainsId PRIMARY KEY (OrderNo, ItemNo)

ALTER TABLE Supplies ADD CONSTRAINT Fk_SuppliesItemNo FOREIGN KEY (ItemNo) REFERENCES Item(ItemNo)
ALTER TABLE Supplies ADD CONSTRAINT Fk_SuppliesSupplierNo FOREIGN KEY (SupplierNo) REFERENCES Supplier(SupplierNo)
ALTER TABLE Supplies ADD CONSTRAINT Pk_SuppliesId PRIMARY KEY (ItemNo, SupplierNo)

-- [Restricciones 2]

ALTER TABLE Customer ADD CONSTRAINT Ch_CreditLimit CHECK (CreditLimit >= 10000 AND CreditLimit <= 100000)

-- [Restricciones 3]

ALTER TABLE Item ADD CONSTRAINT Ch_ItemName UNIQUE (ItemName)

-- [Restricciones 4]

-- Ya lo hice en el punto 1

-- [Restricciones 5]

CREATE DEFAULT Minimo AS 10
EXEC sp_bindefault Minimo,'Item.ReorderPoint'

-- [Restricciones 6]

ALTER TABLE SupAdd ADD CONSTRAINT Ch_SupplierCountry CHECK (Country = 'Mexico' OR Country = 'USA' OR Country = 'Japon' OR Country = 'Francia' OR Country = 'Italia')

-- Insertamos los datos

INSERT INTO Customer VALUES(1,50000)
INSERT INTO CustName VALUES(1, 'Espadas', 'Sajid')
INSERT INTO CustAdd VALUES(1, 'Segunda', 'Tijuana', 'Baja California', 22460)
INSERT INTO CustPhone VALUES(1, 664, 6167847)
INSERT INTO Orders VALUES(1, '2021-09-23', 30000.99, 4200.99)
INSERT INTO Buys VALUES(1, 1)
INSERT INTO deliverToAddress VALUES(1, 'Segunda', 'Tijuana', 'Baja California', 22460)
INSERT INTO deliverToPhone VALUES(1, 664, 2713859)
INSERT INTO Item VALUES(1, 'PlayBox Switch 5', 30000.99, 4200.99, DEFAULT)
INSERT INTO OrderContains VALUES(1, 1) --
INSERT INTO Supplier VALUES(1, 'SonySofTendo', 'Kenityataro Yodewa')
INSERT INTO Supplies VALUES(500, 1, 1) --
INSERT INTO supAdd VALUES(1, 'Calle Falsa 123', 'Springfield', 'Oregon', 97086, 'USA')
INSERT INTO SupPhone VALUES(1, 503, 451, 5647329)

SELECT * FROM Customer
SELECT * FROM custName
SELECT * FROM custAdd
SELECT * FROM CustPhone
SELECT * FROM Orders
SELECT * FROM Buys
SELECT * FROM deliverToAddress
SELECT * FROM deliverToPhone
SELECT * FROM Item
SELECT * FROM OrderContains
SELECT * FROM Supplier
SELECT * FROM Supplies
SELECT * FROM supAdd
SELECT * FROM SupPhone

-- || ======== [REGLAS] ======== || --

CREATE RULE CheckZipPostalCode AS @ZipPostalCode LIKE '%[0-9]%' AND LEN(@ZipPostalCode) = 5
EXEC sp_bindrule CheckZipPostalCode, 'Supadd.ZipPostalCode'

CREATE RULE CheckZipMayMen AS @UnitPrice > 1 AND @UnitPrice < 9999
EXEC sp_bindrule CheckZipMayMen, 'Item.UnitPrice'

CREATE RULE CheckFormato AS @CustId LIKE '%[0-9]%' AND LEN(@CustId) = 5
EXEC sp_bindrule CheckFormato, 'Customer.CustId'

CREATE RULE CheckCode AS @AreaCode LIKE '%[0-9]%' AND LEN(@AreaCode) = 3
EXEC sp_bindrule CheckCode, 'CustPhone.AreaCode'
EXEC sp_bindrule CheckCode, 'DeliverToPhone.AreaCode'
EXEC sp_bindrule CheckCode, 'SupPhone.AreaCode'

CREATE RULE CheckAlfaNum AS @AlfaNum NOT LIKE '%[^A-Z]%'
EXEC sp_bindrule CheckAlfaNum, 'CustName.LastName'
EXEC sp_bindrule CheckAlfaNum, 'CustName.FirstName'
EXEC sp_bindrule CheckAlfaNum, 'Supplier.SupName'

-- || ======== [TRABAJO 12] ======== || --

INSERT INTO Customer VALUES(22222,95000)
INSERT INTO CustName VALUES(22222, 'Rodriguez', 'Arturo')
INSERT INTO CustAdd VALUES(22222, 'Tercera', 'Tijuana', 'Baja California', 22455)
INSERT INTO CustPhone VALUES(22222, 664, 5582782)
INSERT INTO Orders VALUES(22222, '2021-10-12', 35000, 39000.50)
INSERT INTO Buys VALUES(22222, 22222)
INSERT INTO deliverToAddress VALUES(22222, 'Tercera', 'Tijuana', 'Baja California', 22455)
INSERT INTO deliverToPhone VALUES(22222, 664, 5582782)
INSERT INTO Item VALUES(22222, 'Tenis sucios', 8999.50, 5700.99, DEFAULT)
INSERT INTO OrderContains VALUES(22222, 22222)
INSERT INTO Supplier VALUES(22222, 'Drew', 'McIntyre')
INSERT INTO Supplies VALUES(200, 22222, 22222)
INSERT INTO supAdd VALUES(22222, 'Calle Verdadera 123', 'Springfield 2', 'Monterrey', 97086, 'Mexico')
INSERT INTO SupPhone VALUES(22222, 521, 429, 5647661)

INSERT INTO Customer VALUES(33333,55000)
INSERT INTO CustName VALUES(33333, 'Roman', 'Reigns')
INSERT INTO CustAdd VALUES(33333, 'Cuarta', 'Tijuana', 'Baja California', 22221)
INSERT INTO CustPhone VALUES(33333, 664, 9922341)
INSERT INTO Orders VALUES(33333, '2021-10-25', 39200.35, 4100.35)
INSERT INTO Buys VALUES(33333, 33333)
INSERT INTO deliverToAddress VALUES(33333, 'Segunda', 'Tijuana', 'Baja California', 22460)
INSERT INTO deliverToPhone VALUES(33333, 664, 2713859)
INSERT INTO Item VALUES(33333, 'Pasta dental', 6666.66, 4200.99, DEFAULT)
INSERT INTO OrderContains VALUES(33333, 33333)
INSERT INTO Supplier VALUES(33333, 'Vince', 'McMahon')
INSERT INTO Supplies VALUES(300, 33333, 33333)
INSERT INTO supAdd VALUES(33333, 'Calle Homo 123', 'Springfield 3', '', 97086, 'Japon')
INSERT INTO SupPhone VALUES(33333, 521, 451, 1236735)

INSERT INTO Customer VALUES(44444,22000)
INSERT INTO CustName VALUES(44444, 'Hector', 'Jimenez')
INSERT INTO CustAdd VALUES(44444, 'Quinta', 'Tijuana', 'Baja California', 22331)
INSERT INTO CustPhone VALUES(44444, 664, 1287789)
INSERT INTO Orders VALUES(44444, '2021-10-25', 11000.11, 2500.25)
INSERT INTO Buys VALUES(44444, 44444)
INSERT INTO deliverToAddress VALUES(44444, 'Segunda', 'Tijuana', 'Baja California', 22460)
INSERT INTO deliverToPhone VALUES(44444, 664, 2713859)
INSERT INTO Item VALUES(44444, 'Jet Privado', 9998, 4000.99, DEFAULT)
INSERT INTO OrderContains VALUES(44444, 44444)
INSERT INTO Supplier VALUES(44444, 'Guadalupe', 'Victoria')
INSERT INTO Supplies VALUES(300, 44444, 44444)
INSERT INTO supAdd VALUES(44444, 'Calle Hetero 123', 'Springfield 4', '', 97881, 'USA')
INSERT INTO SupPhone VALUES(44444, 853, 987, 7477091)

-- =========== [PUNTO 1] ================ --

SELECT * FROM Customer
INNER JOIN CustName ON CustName.custId = Customer.CustId
INNER JOIN CustAdd ON CustAdd.CustId = Customer.CustId
INNER JOIN CustPhone ON CustPhone.custId =Customer.CustId
INNER JOIN Buys ON Customer.CustId = Buys.CustId 
INNER JOIN Orders ON Buys.OrderNo = Orders.OrderNo
INNER JOIN DeliverToAddress ON Orders.OrderNo = DeliverToAddress.OrderNo
INNER JOIN DeliverToPhone ON Orders.OrderNo = DeliverToPhone.OrderNo

-- =========== [PUNTO 2] ================ --

SELECT Item.*,Orders.*, DeliverToAddress.*, DeliverToPhone.* FROM Item
INNER JOIN OrderContains ON Item.ItemNo = OrderContains.OrderNo 
INNER JOIN Orders ON OrderContains.OrderNo = Orders.OrderNo
INNER JOIN DeliverToAddress ON Orders.OrderNo = DeliverToAddress.OrderNo
INNER JOIN DeliverToPhone ON Orders.OrderNo = DeliverToPhone.OrderNo

-- =========== [PUNTO 3] ================ --

SELECT Supplier.*, SupPhone.*, SupAdd.*, Item.*, Supplies.unitCost FROM Supplier 
INNER JOIN  Supplies ON Supplier.SupplierNo = Supplies.SupplierNo
INNER JOIN  SupPhone ON SupPhone.SupplierNo = Supplier.SupplierNo
INNER JOIN  SupAdd ON SupAdd.SupplierNo = Supplier.SupplierNo
INNER JOIN Item ON Item.ItemNo = Supplies.ItemNo

-- =========== [PUNTO 4] ================ --

SELECT Item.*, OrderContains.*, Orders.*, DeliverToAddress.*, DeliverToPhone.* FROM Item 
FULL OUTER JOIN OrderContains ON Item.ItemNo = OrderContains.ItemNo 
FULL OUTER JOIN Orders ON Orders.OrderNo = OrderContains.OrderNo
FULL OUTER JOIN DeliverToAddress ON DeliverToAddress.OrderNo = OrderContains.OrderNo
FULL OUTER JOIN DeliverToPhone ON DeliverToPhone.OrderNo = OrderContains.OrderNo

-- =========== [PUNTO 5] ================ --

SELECT * FROM Supplier 
LEFT OUTER JOIN SupPhone ON Supplier.SupplierNo = SupPhone.SupplierNo
LEFT OUTER JOIN SupAdd ON Supplier.SupplierNo = SupAdd.SupplierNo
LEFT OUTER JOIN Supplies ON Supplier.SupplierNo = Supplies.SupplierNo

-- =========== [PUNTO 6] ================ --

SELECT Orders.*, DeliverToAddress.*, DeliverToPhone.*, CustName.LastName, CustName.FirstName, CustAdd.Street, CustAdd.City, Customer.CreditLimit FROM Buys
INNER JOIN Orders ON Buys.OrderNo = Orders.OrderNo
INNER JOIN DeliverToAddress ON Orders.OrderNo = DeliverToAddress.OrderNo
INNER JOIN DeliverToPhone ON Orders.OrderNo = DeliverToPhone.OrderNo
INNER JOIN Customer ON Customer.CustId = Buys.CustId 
INNER JOIN CustName ON CustName.CustId = Customer.CustId
INNER JOIN CustAdd ON custAdd.CustId = Customer.CustId

-- =========== [PUNTO 7] ================ --

SELECT Customer.*, CustName.*, CustAdd.*, CustPhone.*, Orders.TotalAmount FROM Customer 
INNER JOIN Buys ON Buys.custId = Customer.CustId 
INNER JOIN CustName ON CustName.custId = Customer.CustId 
INNER JOIN CustAdd ON CustAdd.custId = Customer.CustId 
INNER JOIN CustPhone ON CustPhone.custId = Customer.CustId 
INNER JOIN Orders ON Orders.OrderNo = Buys.OrderNo 
WHERE Orders.TotalAmount > 10000

-- =========== [PUNTO 8] ================ --

SELECT CustName.LastName, CustName.FirstName, Item.* FROM Item
INNER JOIN OrderContains ON OrderContains.ItemNo = Item.ItemNo
INNER JOIN Buys ON Buys.OrderNo = OrderContains.OrderNo
INNER JOIN Orders ON OrderContains.OrderNo = Orders.OrderNo
INNER JOIN Customer ON Buys.CustId = Customer.CustId
INNER JOIN CustName ON Customer.CustId = CustName.custId
WHERE CustName.FirstName LIKE 'Hector' AND CustName.LastName LIKE 'Jimenez'

-- =========== [PUNTO 9] ================ --

SELECT * FROM Item WHERE Item.UnitPrice < (SELECT AVG(Item.UnitPrice) FROM Item)

-- =========== [PUNTO 10] ================ --

SELECT * FROM Item WHERE ItemName LIKE '%Jet%'

-- || ======== [TRABAJO 12 (Con Vistas)] ======== || --

-- =========== [PUNTO 1] ================ --

CREATE VIEW dbo.Vista1 AS SELECT Customer.CustId, Customer.CreditLimit, CustName.FirstName, CustName.LastName, CustAdd.City, CustPhone.Number, Orders.OrderNo, Orders.TotalAmount FROM Customer
INNER JOIN CustName ON CustName.custId = Customer.CustId
INNER JOIN CustAdd ON CustAdd.CustId = Customer.CustId
INNER JOIN CustPhone ON CustPhone.custId =Customer.CustId
INNER JOIN Buys ON Customer.CustId = Buys.CustId 
INNER JOIN Orders ON Buys.OrderNo = Orders.OrderNo
INNER JOIN DeliverToAddress ON Orders.OrderNo = DeliverToAddress.OrderNo
INNER JOIN DeliverToPhone ON Orders.OrderNo = DeliverToPhone.OrderNo

SELECT * FROM Vista1

-- =========== [PUNTO 2] ================ --

CREATE VIEW dbo.Vista2 AS SELECT Item.*, Orders.OrderNo, Orders.orderDate, Orders.Tax, Orders.TotalAmount  FROM Item
INNER JOIN OrderContains ON Item.ItemNo = OrderContains.OrderNo 
INNER JOIN Orders ON OrderContains.OrderNo = Orders.OrderNo
INNER JOIN DeliverToAddress ON Orders.OrderNo = DeliverToAddress.OrderNo
INNER JOIN DeliverToPhone ON Orders.OrderNo = DeliverToPhone.OrderNo

SELECT * FROM Vista2

-- =========== [PUNTO 3] ================ --

CREATE VIEW dbo.Vista3 AS SELECT Supplier.*, SupPhone.AreaCode, SupPhone.CountryCode, SupPhone.Number, SupAdd.City, SupAdd.Country, SupAdd.Street, SupAdd.SupAddState, SupAdd.ZipPostalCode, Supplies.ItemNo, Supplies.UnitCost FROM Supplier 
INNER JOIN  Supplies ON Supplier.SupplierNo = Supplies.SupplierNo
INNER JOIN  SupPhone ON SupPhone.SupplierNo = Supplier.SupplierNo
INNER JOIN  SupAdd ON SupAdd.SupplierNo = Supplier.SupplierNo
INNER JOIN Item ON Item.ItemNo = Supplies.ItemNo

SELECT * FROM Vista3

-- =========== [PUNTO 4] ================ --

CREATE VIEW dbo.Vista4 AS SELECT Item.*, OrderContains.OrderNo, Orders.orderDate, Orders.Tax, Orders.TotalAmount FROM Item 
FULL OUTER JOIN OrderContains ON Item.ItemNo = OrderContains.ItemNo 
FULL OUTER JOIN Orders ON Orders.OrderNo = OrderContains.OrderNo
FULL OUTER JOIN DeliverToAddress ON DeliverToAddress.OrderNo = OrderContains.OrderNo
FULL OUTER JOIN DeliverToPhone ON DeliverToPhone.OrderNo = OrderContains.OrderNo

SELECT * FROM Vista4

-- =========== [PUNTO 5] ================ --

CREATE VIEW dbo.Vista5 AS SELECT Supplier.*, Supplies.ItemNo, Supplies.UnitCost FROM Supplier 
LEFT OUTER JOIN SupPhone ON Supplier.SupplierNo = SupPhone.SupplierNo
LEFT OUTER JOIN SupAdd ON Supplier.SupplierNo = SupAdd.SupplierNo
LEFT OUTER JOIN Supplies ON Supplier.SupplierNo = Supplies.SupplierNo

SELECT * FROM Vista5

-- =========== [PUNTO 6] ================ --

CREATE VIEW dbo.Vista6 AS SELECT Buys.*,Orders.orderDate, Orders.Tax, Orders.TotalAmount, DeliverToAddress.City, CustName.LastName, CustName.FirstName, CustAdd.Street, Customer.CreditLimit FROM Buys
INNER JOIN Orders ON Buys.OrderNo = Orders.OrderNo
INNER JOIN DeliverToAddress ON Orders.OrderNo = DeliverToAddress.OrderNo
INNER JOIN DeliverToPhone ON Orders.OrderNo = DeliverToPhone.OrderNo
INNER JOIN Customer ON Customer.CustId = Buys.CustId 
INNER JOIN CustName ON CustName.CustId = Customer.CustId
INNER JOIN CustAdd ON custAdd.CustId = Customer.CustId

SELECT * FROM Vista6

-- =========== [PUNTO 7] ================ --

CREATE VIEW dbo.Vista7 AS SELECT Customer.*, CustName.FirstName, CustName.LastName, CustAdd.City, CustAdd.CustState, CustAdd.Street, CustAdd.Zip, CustPhone.AreaCode, CustPhone.Number, Orders.OrderNo, Orders.orderDate,Orders.TotalAmount FROM Customer
INNER JOIN Buys ON Buys.custId = Customer.CustId 
INNER JOIN CustName ON CustName.custId = Customer.CustId 
INNER JOIN CustAdd ON CustAdd.custId = Customer.CustId 
INNER JOIN CustPhone ON CustPhone.custId = Customer.CustId 
INNER JOIN Orders ON Orders.OrderNo = Buys.OrderNo 
WHERE Orders.TotalAmount > 10000

SELECT * FROM Vista7

-- =========== [PUNTO 8] ================ --

CREATE VIEW dbo.Vista8 AS SELECT CustName.LastName, CustName.FirstName, Item.* FROM Item
INNER JOIN OrderContains ON OrderContains.ItemNo = Item.ItemNo
INNER JOIN Buys ON Buys.OrderNo = OrderContains.OrderNo
INNER JOIN Orders ON OrderContains.OrderNo = Orders.OrderNo
INNER JOIN Customer ON Buys.CustId = Customer.CustId
INNER JOIN CustName ON Customer.CustId = CustName.custId
WHERE CustName.FirstName LIKE 'Hector' AND CustName.LastName LIKE 'Jimenez'

SELECT * FROM Vista8

-- =========== [PUNTO 9] ================ --

CREATE VIEW dbo.Vista9 AS SELECT * FROM Item WHERE Item.UnitPrice < (SELECT AVG(Item.UnitPrice) FROM Item)

SELECT * FROM Vista9

-- =========== [PUNTO 10] ================ --

CREATE VIEW dbo.Vista10 AS SELECT * FROM Item WHERE ItemName LIKE '%Jet%'

SELECT * FROM Vista10

print("Python")
print("is easy to learn.")

# new line
print()

# print both the statements on a single line
print("Python", end=" ")
print("is easy to learn.")