<

SELECT Max (Tabla1);
SELECT Avg (Tabla1);
SELECT Count (Tabla1);
SELECT Min (Tabla1);
SELECT Sum (Tabla1);

SELECT Tan (Tabla1);
SELECT Sqrt (Tabla1);
SELECT Square (Tabla1);
SELECT Log (Tabla1);
SELECT Sin (Tabla1);

NombreDelMetodo | Var1, Var2

ToUpper.ToString.VarInt123

Reverse.VarStringABC ~ VariableEjemplo

switch(Var1)
{
    Case 'HolaSajid':
        foreach (string Valores in Arreglo_Nombres){}
    break;

    Case 2:
        foreach (string Valores in Arreglo_Nombres){}
    break;

    default:
        do
        {

        } while (Num1 == Num2);
    break;
}

foreach (string Valores in Arreglo_Nombres){

}

[int].(5,2,7,3,6,41232,67,7,3) (ArregloEjemploInt) ~ [50]

do
{

} while (Num1 == Num2);

while ( num1 == num2 ){

}

for ( int i = 0 ; i == 3 ; i --){

    for ( int i = 0 ; i == 3 ; i --){
        
        for ( int i = 0 ; i == 3 ; i --){
            ToUpper.ToString.VarInt123
        }
    }
}

if(num1 == num2){
    INSERT INTO TablaEjemplo VALUES (1, 'Alvaro es el mejor companero del mundo');
}

try
{

}
catch (Exception e)
{

}

CREATE TABLE TablaEjemplo(

);

CREATE DATABASE dbo.BaseDeDatosNueva;

USE dbo.BaseDeDatosNueva;

INSERT INTO TablaEjemplo VALUES (1, 'Alvaro es el mejor companero del mundo')

DROP TABLE dbo.TablaEjemplo123;

CREATE FUNCTION dbo.CalcularOperacion (@Num1 FLOAT, @Num2 FLOAT)
RETURN FLOAT
AS
BEGIN
RETURNS @Num1
END

CREATE TRIGGER ALTASALUMNOS
    AS
    BEGIN
        INSERT INTO TablaEjemplo VALUES (1, 'Alvaro es el mejor companero del mundo')
    END
GO

CREATE PROCEDURE dbo.CapturaDatosEmpleado
AS
    INSERT INTO TablaEjemplo VALUES (1, 'A la benchi')
GO

CREATE VIEW dbo.VistaEjemplo AS SELECT * FROM TablaEjemplo

>

Include (Libreria1);
Include (Libreria2);

private static (int Var1, char Var2, float Var3) NombreProcedimiento
|

private static int (int Var1, char Var2, float Var3) NombreProcedimiento
| VarRetorno


class private
([string, int] (VarAtrib1, VarAtrib2) )
(int Parametro1, char Parametro2) 
    private static (int Var1, char Var2, float Var3) NombreProcedimiento
    |
    private static int (int Var1, char Var2, float Var3) NombreProcedimiento
    | VarRetorno
| NombreClase
