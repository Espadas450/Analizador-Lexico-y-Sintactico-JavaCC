/* Generated By:JavaCC: Do not edit this line. comp.java */
import java.util.*;
class comp implements compConstants {
        public static void main( String[] args )throws ParseException
        {
                try
                {
                comp Checker = new comp( System.in ) ;
                        Checker.Program();
                        System.out.println("\tHabemus analizado todo.");
                }
                catch(ParseException e)
                {
                        System.err.print(e.getMessage());
                        System.out.println("\tChecker ha terminado.");
                }
                catch(TokenMgrError e)
                {
                        System.err.print(e.getMessage());
                        System.out.println("\tChecker ha terminado.");
                }
        }

/* || ========== || [ FINALIZA LEXICO ] || ========== || */

/* || ========== || [ INICIA SINTACTICO ] || ========== || */
  static final public void Program() throws ParseException {
        System.out.println("+==========================================+");
        System.out.println("|     Token      |=====|    Atributo       |");
        System.out.println("+==========================================+");
        boolean flag = true;
        int Tid;
        String Timage;
        List<String> ID = new ArrayList<String>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Pregunta:
      case CorIzq:
      case TipoDatoNumerico:
      case TipoDatoNoNumerico:
      case TipoAcceso:
      case Do:
      case For:
      case Foreach:
      case While:
      case Metodo:
      case As:
      case Intenta:
      case Retorno:
      case Declaracion:
      case Insertar:
      case Estatico:
      case Caracteres:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Foreach:
        SentenciaForeach();
                System.out.println("  SentenciaForeach" + "   \t\t" +  "\t\t     ");
        break;
      case Do:
        SentenciaDoWhile();
                System.out.println("  SentenciaDoWhile" + "   \t\t" +  "\t\t     ");
        break;
      case While:
        SentenciaWhile();
                System.out.println("  SentenciaWhile" + "   \t\t" +  "\t\t     ");
        break;
      case For:
        SentenciaFor();
                System.out.println("  SentenciaFor" + "   \t\t" +  "\t\t     ");
        break;
      case Pregunta:
        SentenciaIf();
                System.out.println("  SentenciaIf" + "   \t\t" +  "\t\t     ");
        break;
      case TipoDatoNumerico:
      case TipoDatoNoNumerico:
        DeclaracionVariable();
                System.out.println("  DeclaracionVariable" + "   \t\t" +  "\t\t     ");
        break;
      case Caracteres:
        SentenciaLlamadaMetodo();
                System.out.println("  SentenciaLlamadaMetodo" + "   \t\t" +  "\t\t     ");
        break;
      case TipoAcceso:
      case Metodo:
      case Estatico:
        SentenciaMetodo();
                System.out.println("  SentenciaMetodo" + "   \t\t" +  "\t\t     ");
        break;
      case Intenta:
        SentenciaTryCatch();
                System.out.println("  SentenciaTryCatch" + "   \t\t" +  "\t\t     ");
        break;
      case As:
      case Retorno:
      case Declaracion:
        SentenciaDeclaracion();
                System.out.println("  SentenciaDeclaracion" + "   \t\t" +  "\t\t     ");
        break;
      case Insertar:
        SentenciaInsertarEnTabla();
                System.out.println("  SentenciaInsertarEnTabla" + "   \t\t" +  "\t\t     ");
        break;
      case CorIzq:
        saDeclaracionVariables();
                System.out.println("  saDeclaracionVariables" + "   \t\t" +  "\t\t     ");
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
                System.out.println("+===================================================+");
  }

/* || ============================== || [ INICIA COMPLEMENTOS ] || ============================== || */
  static final public void Condicion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Numero:
      label_2:
      while (true) {
        jj_consume_token(Numero);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Numero:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      break;
    case Caracteres:
      jj_consume_token(Caracteres);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(Comparador);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Numero:
      label_3:
      while (true) {
        jj_consume_token(Numero);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Numero:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
      }
      break;
    case Caracteres:
      jj_consume_token(Caracteres);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MasVariables() throws ParseException {
    jj_consume_token(Coma);
    jj_consume_token(Caracteres);
  }

  static final public void Parametro() throws ParseException {
    TipoDato();
    jj_consume_token(Caracteres);
  }

  static final public void InicioMetodo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TipoAcceso:
      jj_consume_token(TipoAcceso);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Estatico:
      jj_consume_token(Estatico);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void InicioDeclaracion() throws ParseException {
    jj_consume_token(Declaracion);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TipoCreate:
      jj_consume_token(TipoCreate);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Dbo:
      jj_consume_token(Dbo);
      jj_consume_token(AccesoMiembro);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(Caracteres);
  }

  static final public void Texto() throws ParseException {
    jj_consume_token(Comillas);
    jj_consume_token(Caracteres);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Caracteres:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(Caracteres);
    }
    jj_consume_token(Comillas);
  }

  static final public void saValores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comillas:
      Texto();
      break;
    case Numero:
      jj_consume_token(Numero);
      break;
    case NumeroDecimal:
      jj_consume_token(NumeroDecimal);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EstructuraMetodo() throws ParseException {
    jj_consume_token(Caracteres);
    jj_consume_token(ParenIzq);
    SentenciaDeclaracionParametro();
    jj_consume_token(ParenDer);
    jj_consume_token(LlaveIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Retorno:
      jj_consume_token(Retorno);
      jj_consume_token(Caracteres);
      jj_consume_token(PuntoYComa);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDer);
  }

  static final public void SentenciaDeclaracionParametro() throws ParseException {
    Parametro();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(Coma);
      Parametro();
    }
  }

  static final public void ParametroSQL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Sustitucion:
      jj_consume_token(Sustitucion);
      jj_consume_token(Caracteres);
      TipoDato();
      break;
    case Numero:
      label_6:
      while (true) {
        jj_consume_token(Numero);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Numero:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DeclaracionParametroSQL() throws ParseException {
    ParametroSQL();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(Coma);
      ParametroSQL();
    }
  }

  static final public void TipoDatoNumerico() throws ParseException {
    ParametroSQL();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(Coma);
      ParametroSQL();
    }
  }

  static final public void TipoDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TipoDatoNoNumerico:
      jj_consume_token(TipoDatoNoNumerico);
      break;
    case TipoDatoNumerico:
      jj_consume_token(TipoDatoNumerico);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BloqueCodigo() throws ParseException {
    jj_consume_token(Gbajo);
  }

/* || ============================== || [ FINALIZA COMPLEMENTOS ] || ============================== || */

/* SentenciaForeach [Estructura #1] */
  static final public void SentenciaForeach() throws ParseException {
    jj_consume_token(Foreach);
    jj_consume_token(ParenIzq);
    TipoDato();
    jj_consume_token(Caracteres);
    jj_consume_token(In);
    jj_consume_token(Caracteres);
    jj_consume_token(ParenDer);
    jj_consume_token(LlaveIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Gbajo:
      BloqueCodigo();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDer);
  }

/* SentenciaDoWhile [Estructura #2] */
  static final public void SentenciaDoWhile() throws ParseException {
    jj_consume_token(Do);
    jj_consume_token(LlaveIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Gbajo:
      BloqueCodigo();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDer);
    jj_consume_token(While);
    jj_consume_token(ParenIzq);
    Condicion();
    jj_consume_token(ParenDer);
    jj_consume_token(PuntoYComa);
  }

/* SentenciaWhile [Estructura #3] */
  static final public void SentenciaWhile() throws ParseException {
    jj_consume_token(While);
    jj_consume_token(ParenIzq);
    Condicion();
    jj_consume_token(ParenDer);
    jj_consume_token(LlaveIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Gbajo:
      BloqueCodigo();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDer);
  }

/* SentenciaFor [Estructura #4] */
  static final public void SentenciaFor() throws ParseException {
    jj_consume_token(For);
    jj_consume_token(ParenIzq);
    jj_consume_token(TipoDatoNumerico);
    jj_consume_token(Caracteres);
    jj_consume_token(Asignar);
    label_9:
    while (true) {
      jj_consume_token(Numero);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Numero:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
    }
    jj_consume_token(PuntoYComa);
    jj_consume_token(Caracteres);
    jj_consume_token(Comparador);
    label_10:
    while (true) {
      jj_consume_token(Numero);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Numero:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
    }
    jj_consume_token(PuntoYComa);
    jj_consume_token(Caracteres);
    jj_consume_token(OpAritmeticoUnitario);
    jj_consume_token(ParenDer);
    jj_consume_token(LlaveIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Gbajo:
      BloqueCodigo();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDer);
  }

/* SentenciaIf [Estructura #5] */
  static final public void SentenciaIf() throws ParseException {
    jj_consume_token(Pregunta);
    jj_consume_token(ParenIzq);
    Condicion();
    jj_consume_token(ParenDer);
    jj_consume_token(LlaveIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Gbajo:
      BloqueCodigo();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDer);
  }

/* DeclaracionVariable [Estructura #6] */
  static final public void DeclaracionVariable() throws ParseException {
    TipoDato();
    jj_consume_token(Caracteres);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
      MasVariables();
    }
    jj_consume_token(PuntoYComa);
  }

/* Comentario [Estructura #7]
void SentenciaComentario():{}{
	(<ComentC>|<ComentSQLInicio>) TodoElTexto() <ComentSQLFin>
}
*/

/* SentenciaLlamadaMetodo [Estructura #8] */
  static final public void SentenciaLlamadaMetodo() throws ParseException {
    jj_consume_token(Caracteres);
    jj_consume_token(ParenIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Caracteres:
      jj_consume_token(Caracteres);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Coma:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_12;
        }
        MasVariables();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(ParenDer);
    jj_consume_token(PuntoYComa);
  }

/* SentenciaMetodoP [Estructura #09] */
/* SentenciaMetodoF [Estructura #10] */
  static final public void SentenciaMetodo() throws ParseException {
    InicioMetodo();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Metodo:
      jj_consume_token(Metodo);
      EstructuraMetodo();
      break;
    case TipoDatoNumerico:
    case TipoDatoNoNumerico:
      TipoDato();
      EstructuraMetodo();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* SentenciaTryCatch  [Estructura #11] */
  static final public void SentenciaTryCatch() throws ParseException {
    jj_consume_token(Intenta);
    jj_consume_token(LlaveIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Gbajo:
      BloqueCodigo();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDer);
    jj_consume_token(CapExcepcion);
    jj_consume_token(ParenIzq);
    jj_consume_token(Excepcion);
    jj_consume_token(Caracteres);
    jj_consume_token(ParenDer);
    jj_consume_token(LlaveIzq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Gbajo:
      BloqueCodigo();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDer);
  }

/* SQLCreateTable 		[Estructura #12] */
/* SQLCreateDataBase 	[Estructura #13] */
/* SQLUse 				[Estructura #14] */
/* SQLInsertInto 		[Estructura #15] */
/* SQLDropTable 		[Estructura #16] */
/* SQLCreateFunction	[Estructura #17] */
/* SQLCreateView		[Estructura #18] */
  static final public void SentenciaDeclaracion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Declaracion:
      InicioDeclaracion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ParenIzq:
        jj_consume_token(ParenIzq);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Sustitucion:
        case Numero:
          DeclaracionParametroSQL();
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        jj_consume_token(ParenDer);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      break;
    case Retorno:
      jj_consume_token(Retorno);
      TipoDato();
      jj_consume_token(As);
      jj_consume_token(SQLBegin);
      jj_consume_token(Retorno);
      jj_consume_token(Sustitucion);
      jj_consume_token(Caracteres);
      jj_consume_token(SQLEnd);
      break;
    case As:
      jj_consume_token(As);
      jj_consume_token(Consulta);
      jj_consume_token(OpAritmeticoBinario);
      jj_consume_token(Consulta);
      jj_consume_token(Caracteres);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PuntoYComa:
      jj_consume_token(PuntoYComa);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

/* SentenciaInsertarEnTabla   [Estructura #19] */
  static final public void SentenciaInsertarEnTabla() throws ParseException {
    jj_consume_token(Insertar);
    jj_consume_token(DentroDe);
    jj_consume_token(Caracteres);
    jj_consume_token(Valores);
    jj_consume_token(ParenIzq);
    saValores();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_13;
      }
      jj_consume_token(Coma);
      saValores();
    }
    jj_consume_token(ParenDer);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PuntoYComa:
      jj_consume_token(PuntoYComa);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
  }

/* || ========== || [ INICIAN INVENTADAS  ] || ========== || */

/* saDeclaracionVariables   [Estructura inv00] */
  static final public void saDeclaracionVariables() throws ParseException {
    jj_consume_token(CorIzq);
    TipoDato();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
      jj_consume_token(Coma);
      TipoDato();
    }
    jj_consume_token(CorDer);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AccesoMiembro:
      jj_consume_token(AccesoMiembro);
      jj_consume_token(ParenIzq);
      saValores();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Coma:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_15;
        }
        jj_consume_token(Coma);
        saValores();
      }
      jj_consume_token(ParenDer);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(ParenIzq);
    jj_consume_token(Caracteres);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_16;
      }
      jj_consume_token(Coma);
      jj_consume_token(Caracteres);
    }
    jj_consume_token(ParenDer);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
      jj_la1_init_9();
      jj_la1_init_10();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1100,0x1100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x300,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x10000000,0x4000,0x4000,0x300,0x2000,0x2000,0x2000,0x0,0x0,0x2000,0x2000,0x4000,0x4000,0x0,0x300,0x2000,0x2000,0x10000000,0x0,0x0,0x1000,0x4000,0x1000,0x4000,0x4000,0x800000,0x4000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x403e,0x403e,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0x200800,0x200800,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_9() {
      jj_la1_9 = new int[] {0x4000,0x4000,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x4000,0x0,0x800000,0x0,0x60000000,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_10() {
      jj_la1_10 = new int[] {0x8,0x8,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[324];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
          if ((jj_la1_10[i] & (1<<j)) != 0) {
            la1tokens[320+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 324; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
