/* Generated By:JavaCC: Do not edit this line. comp.java */
import java.util.*;
class comp implements compConstants {
        public static void main( String[] args )throws ParseException
        {
                try
                {
                comp Checker = new comp( System.in ) ;
                        Checker.Program();
                        System.out.println("\tHabemus analizado todo.");
                }
                catch(ParseException e)
                {
                        System.err.println(e.getMessage());
                        System.out.println("\tChecker ha terminado.");
                }
                catch(TokenMgrError e)
                {
                        System.err.println(e.getMessage());
                        System.out.println("\tChecker ha terminado.");
                }
        }

  static final public void Program() throws ParseException {
        int Tid;
        String Timage;
        List<String> ID = new ArrayList<String>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Numero:
      case IDENTIFICADOR:
      case Comentario:
      case Pregunta:
      case Entonces:
      case ParenIzq:
      case ParenDer:
      case CorIzq:
      case CorDer:
      case Comillas:
      case TipoDato:
      case LlaveIzq:
      case LlaveDer:
      case Puntuacion:
      case Comparador:
      case AccesoMiembro:
      case Clase:
      case Sustitucion:
      case TipoAcceso:
      case SelectivaMultiple:
      case Defecto:
      case Asignar:
      case Case:
      case Metodo:
      case ClaseConsole:
      case Sobrecargar:
      case FuncionString:
      case FuncionAgregar:
      case FuncionDate:
      case FuncionMath:
      case FuncionConvert:
      case FuncionLogica:
      case FuncionAnalitic:
      case Estructura:
      case CapExcepcion:
      case Namespace:
      case Intenta:
      case Romper:
      case Base:
      case Propiedad:
      case ResultadoLogico:
      case Lista:
      case Retorno:
      case OpAritmetico:
      case OpAritmeticoUnitario:
      case OpAritmeticoBinario:
      case OpLogicoBoolUnitario:
      case OpLogicoBoolBinario:
      case OpLogicoBoolBinarioCondicional:
      case Consulta:
      case TipoSelect:
      case TipoFrom:
      case TipoWhere:
      case TipoCreate:
      case Add:
      case DentroDe:
      case Valores:
      case Ejecutar:
      case Declaracion:
      case Agregar:
      case Check:
      case Constraint:
      case Llave:
      case TipoLlave:
      case Referencia:
      case Unique:
      case Insertar:
      case Etiqueta:
      case TerminarEtiqueta:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Comillas:
        jj_consume_token(Comillas);
        break;
      case TipoDato:
        jj_consume_token(TipoDato);
        break;
      case Comparador:
        jj_consume_token(Comparador);
        break;
      case TipoAcceso:
        jj_consume_token(TipoAcceso);
        break;
      case SelectivaMultiple:
        jj_consume_token(SelectivaMultiple);
        break;
      case OpLogicoBoolBinario:
        jj_consume_token(OpLogicoBoolBinario);
        break;
      case OpLogicoBoolBinarioCondicional:
        jj_consume_token(OpLogicoBoolBinarioCondicional);
        break;
      case OpAritmeticoBinario:
        jj_consume_token(OpAritmeticoBinario);
        break;
      case OpAritmeticoUnitario:
        jj_consume_token(OpAritmeticoUnitario);
        break;
      case OpAritmetico:
        jj_consume_token(OpAritmetico);
        break;
      case Lista:
        jj_consume_token(Lista);
        break;
      case ResultadoLogico:
        jj_consume_token(ResultadoLogico);
        break;
      case Propiedad:
        jj_consume_token(Propiedad);
        break;
      case FuncionString:
        jj_consume_token(FuncionString);
        break;
      case FuncionAgregar:
        jj_consume_token(FuncionAgregar);
        break;
      case FuncionDate:
        jj_consume_token(FuncionDate);
        break;
      case FuncionMath:
        jj_consume_token(FuncionMath);
        break;
      case FuncionConvert:
        jj_consume_token(FuncionConvert);
        break;
      case FuncionLogica:
        jj_consume_token(FuncionLogica);
        break;
      case FuncionAnalitic:
        jj_consume_token(FuncionAnalitic);
        break;
      case Defecto:
        jj_consume_token(Defecto);
        break;
      case Pregunta:
        jj_consume_token(Pregunta);
        break;
      case Entonces:
        jj_consume_token(Entonces);
        break;
      case ParenIzq:
        jj_consume_token(ParenIzq);
        break;
      case LlaveIzq:
        jj_consume_token(LlaveIzq);
        break;
      case LlaveDer:
        jj_consume_token(LlaveDer);
        break;
      case ParenDer:
        jj_consume_token(ParenDer);
        break;
      case Puntuacion:
        jj_consume_token(Puntuacion);
        break;
      case AccesoMiembro:
        jj_consume_token(AccesoMiembro);
        break;
      case Clase:
        jj_consume_token(Clase);
        break;
      case Sustitucion:
        jj_consume_token(Sustitucion);
        break;
      case Asignar:
        jj_consume_token(Asignar);
        break;
      case Case:
        jj_consume_token(Case);
        break;
      case Metodo:
        jj_consume_token(Metodo);
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
                Tid=token.kind;
                Timage=token.image;
                if(ID.indexOf(Timage)==-1){
                        ID.add(Timage);
                        System.out.println(Tid+ " " + Timage + " [" + ID.indexOf(Timage) + "]");
                        }
                else{
                        System.out.println(Tid+ " " + Timage + " [" + ID.indexOf(Timage) + "]");
                }
        break;
      case ClaseConsole:
        jj_consume_token(ClaseConsole);
        break;
      case Sobrecargar:
        jj_consume_token(Sobrecargar);
        break;
      case Estructura:
        jj_consume_token(Estructura);
        break;
      case CapExcepcion:
        jj_consume_token(CapExcepcion);
        break;
      case Namespace:
        jj_consume_token(Namespace);
        break;
      case Intenta:
        jj_consume_token(Intenta);
        break;
      case Romper:
        jj_consume_token(Romper);
        break;
      case Base:
        jj_consume_token(Base);
        break;
      case Retorno:
        jj_consume_token(Retorno);
        break;
      case OpLogicoBoolUnitario:
        jj_consume_token(OpLogicoBoolUnitario);
        break;
      case Numero:
        jj_consume_token(Numero);
        break;
      case Consulta:
        jj_consume_token(Consulta);
        break;
      case Comentario:
        jj_consume_token(Comentario);
        break;
      case CorIzq:
        jj_consume_token(CorIzq);
        break;
      case CorDer:
        jj_consume_token(CorDer);
        break;
      case Declaracion:
        jj_consume_token(Declaracion);
        break;
      case Agregar:
        jj_consume_token(Agregar);
        break;
      case Check:
        jj_consume_token(Check);
        break;
      case Constraint:
        jj_consume_token(Constraint);
        break;
      case Llave:
        jj_consume_token(Llave);
        break;
      case TipoLlave:
        jj_consume_token(TipoLlave);
        break;
      case Referencia:
        jj_consume_token(Referencia);
        break;
      case Unique:
        jj_consume_token(Unique);
        break;
      case Insertar:
        jj_consume_token(Insertar);
        break;
      case TipoSelect:
        jj_consume_token(TipoSelect);
        break;
      case TipoCreate:
        jj_consume_token(TipoCreate);
        break;
      case TipoFrom:
        jj_consume_token(TipoFrom);
        break;
      case TipoWhere:
        jj_consume_token(TipoWhere);
        break;
      case Add:
        jj_consume_token(Add);
        break;
      case DentroDe:
        jj_consume_token(DentroDe);
        break;
      case Valores:
        jj_consume_token(Valores);
        break;
      case Ejecutar:
        jj_consume_token(Ejecutar);
        break;
      case Etiqueta:
        jj_consume_token(Etiqueta);
        break;
      case TerminarEtiqueta:
        jj_consume_token(TerminarEtiqueta);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
      jj_la1_init_9();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x27f0c,0x27f0c,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x84e04e00,0x84e04e00,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x7e20,0x7e20,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x202080,0x202080,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x1fc21080,0x1fc21080,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x624000,0x624000,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x84483120,0x84483120,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0xf83e0c00,0xf83e0c00,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0x1800003c,0x1800003c,};
   }
   private static void jj_la1_init_9() {
      jj_la1_9 = new int[] {0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[290];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 290; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
